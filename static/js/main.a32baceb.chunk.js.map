{"version":3,"sources":["components/search/index.jsx","pages/home/index.jsx","util.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Search","props","context","getHighlightedString","item","idx","matchIndex","toLowerCase","indexOf","searchText","pre","substring","highlight","length","rest","style","currentPosition","backgroundColor","cursor","onClick","setSelectedItemIndex","color","state","className","display","justifyContent","alignItems","marginRight","onFocus","setListOpen","value","this","onChange","onSearchTextChange","type","placeholder","total","isOpen","data","map","Component","Content","Layout","Home","onKeyPress","e","keyCode","setState","selectedItemIndex","fetchData","a","url","fetch","res","json","response","count","results","name","target","fn","delay","timer","args","arguments","clearTimeout","setTimeout","apply","debounce","bind","document","addEventListener","removeEventListener","class","href","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a32baceb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Search extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n    };\n\n  }\n\n  getHighlightedString = (item, idx) => {\n    const matchIndex = item.toLowerCase().indexOf(this.props.searchText.toLowerCase());\n    const pre = item.substring(0, matchIndex);\n    const highlight = item.substring(matchIndex, matchIndex + this.props.searchText.length);\n    const rest = item.substring(matchIndex + this.props.searchText.length);\n    return <li style={this.props.currentPosition === idx ? {backgroundColor: '#c1bebe', cursor: 'pointer'} : {cursor: 'pointer'}} onClick={() => {\n      this.props.setSelectedItemIndex(idx)\n    }}>\n      {matchIndex !== -1 ? <>{pre}<font style={{color: 'red'}}>{highlight}</font>{rest}</> : item}\n    </li>\n  }\n\n  render() {\n    return (\n        <div className='search-element'>\n          <div style={{display: 'flex',justifyContent: 'center', alignItems: 'center', marginRight: 80}}>\n          <input onFocus={() => this.props.setListOpen(true)} className='search-input' value={this.props.searchText} onChange={this.props.onSearchTextChange} type=\"text\" placeholder=\"Search..\"/>\n          {this.props.total > 0 ? <span className='total-count'>{this.props.total}</span> : null}\n          </div>\n          {this.props.total > 0 && this.props.isOpen ?\n          <ul className='search-result'>\n            {this.props.data.map((item,idx) => {\n              return this.getHighlightedString(item, idx)\n            })}\n          </ul>\n          : null}\n        </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport { debounce } from '../../util';\nimport Search from '../../components/search';\n\nconst { Content } = Layout;\n\nexport default class Home extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      currentPosition: -1,\n      isOpen: false,\n      total: 0\n    };\n\n    this.fetchData = debounce(this.fetchData.bind(this), 500);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyPress);\n  }\n\n\n  onKeyPress = (e) => {\n\n    if (e.keyCode === 38) {\n      if (this.state.total > 0 && this.state.currentPosition - 1 > -1) {\n        this.setState({currentPosition: this.state.currentPosition - 1});\n      }\n    }\n    else if (e.keyCode === 40) {\n      if (this.state.total > 0 && this.state.currentPosition + 1 < this.state.total) {\n        this.setState({currentPosition: this.state.currentPosition + 1});\n      }\n    }\n    else if (e.keyCode === 13 && this.state.currentPosition > -1) {\n      this.setState({selectedItemIndex: this.state.currentPosition, isOpen: false})\n    }\n  }\n\n  fetchData = async () => {\n    try {\n      if (this.state.searchText) {\n        const url = `https://swapi.dev/api/people/?search=${this.state.searchText}`;\n        const res = await fetch(url);\n        const response  = await res.json();\n        if (response) {\n          this.setState({\n            total: response.count,\n            data: response.results.map(item => item.name),\n            isOpen: true\n          })\n        }\n        \n      }\n    }\n    catch(e) {\n    }\n  }\n\n  onSearchTextChange = (e) => {\n    if (!e.target.value) {\n      this.setState({data: [], total: 0, selectedItemIndex: -1});\n    }\n    this.setState({searchText: e.target.value}, this.fetchData);\n  }\n\n  setListOpen = (isOpen) => {\n    this.setState({isOpen})\n  }\n\n  setSelectedItemIndex = (idx) => {\n    this.setState({selectedItemIndex: idx, isOpen: false})\n  }\n\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <div class=\"topnav\">\n          <a class=\"active\" href=\"\">Home</a>\n          <Search data={this.state.data} setSelectedItemIndex={this.setSelectedItemIndex} selectedItemIndex={this.state.selectedItemIndex} total={this.state.total} currentPosition={this.state.currentPosition} isOpen={this.state.isOpen}  setListOpen={this.setListOpen} searchText={this.state.searchText} onSearchTextChange={this.onSearchTextChange}/>\n        </div>\n\n        {this.state.data && this.state.data.length && this.state.selectedItemIndex > -1 ?\n        <Content className='content'>\n          <div>Selected Item is {this.state.data[this.state.selectedItemIndex]}</div>\n        </Content> : null}\n      </Layout>\n    );\n  }\n}\n","export function debounce(fn, delay) {\n    var timer = null;\n    return function() {\n      var context = this,\n        args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(function() {\n        fn.apply(context, args);\n      }, delay);\n    };\n  }","import './App.css';\nimport Home from './pages/home';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Switch>\n              <Route exact path='/' component={Home} />=\n        </Switch>\n      </div>\n    </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}